{-# LANGUAGE UnicodeSyntax, PatternGuards #-}
-- | Read TODOs from files and construct corresponding ADTs.
module TodoLoader
  (loadTodo)
  where

import Prelude hiding (putStrLn,readFile,getContents,print)
import IO
import Control.Monad (forM)
import qualified Data.Map as M
import Text.ParserCombinators.Parsec
import System.FilePath
import Data.Maybe
import Data.Tree
import Data.List (init, nub, sort)

import Unicode
import Types
import TodoParser

todoName ‚à∑ Todo ‚Üí String
todoName todo = itemName ‚ãÑ rootLabel todo

getDepends ‚à∑ TodoMap ‚Üí TodoItem ‚Üí [Todo]
getDepends m item = catMaybes [M.lookup name m | name ‚Üê depends item] 

normalizeItem ‚à∑ TodoMap ‚Üí TodoItem ‚Üí Todo
normalizeItem m item = Node item (map (normalize m) ‚ãÑ getDepends m item)

normalize ‚à∑ TodoMap ‚Üí Todo ‚Üí Todo 
normalize m todo = Node item' ((map (normalize m) subTodos) ‚ß∫ (map (normalize m) deps))
  where
    item ‚à∑ TodoItem
    item = rootLabel todo

    item' ‚à∑ TodoItem
    item' = item {depends=[]}

    subTodos ‚à∑ [Todo]
    subTodos = subForest todo

    deps ‚à∑ [Todo]
    deps = getDepends m item

normalizeList ‚à∑ TodoMap ‚Üí [Todo] ‚Üí [Todo]
normalizeList m todos = map (normalize m) todos

readFile' ‚à∑ FilePath ‚Üí IO String
readFile' "-"  = getContents
readFile' file = readFile file

loadFile ‚à∑ Config
         ‚Üí DateTime
         ‚Üí FilePath
         ‚Üí IO [TodoItem]
loadFile conf year path =
  case prefix conf of
    Nothing ‚Üí do
        text ‚Üê readFile' path
        return $ parsePlain conf year path text
    Just p  ‚Üí do
        text ‚Üê readFile' path
        return $ parseAlternate conf 2 p year path text

(~-) ‚à∑  TodoItem ‚Üí ‚Ñ§ ‚Üí TodoItem
i@(Item {itemLevel=n}) ~- k = i {itemLevel=n-k}

(~+) ‚à∑  TodoItem ‚Üí ‚Ñ§ ‚Üí TodoItem
i@(Item {itemLevel=n}) ~+ k = i {itemLevel=n+k}

iszero ‚à∑  TodoItem ‚Üí ùîπ
iszero item = (itemLevel item)==0

group' ‚à∑  [TodoItem] ‚Üí [[TodoItem]]
group' [] = []
group' (x:xs) = let (one,other) = break iszero xs
                in (x:one):group' other

mkTodo ‚à∑ [TodoItem] ‚Üí [Todo]
mkTodo = (map mkTodo') ‚àò group'

mkTodo' ‚à∑ [TodoItem] ‚Üí Todo
mkTodo' (x:xs) = Node x other
    where other = mkTodo ‚ãÑ map (~-lvl) xs
          lvl = itemLevel (head xs)
          
consTodoMap ‚à∑ [Todo] ‚Üí TodoMap
consTodoMap todos = M.fromList (cons1 100 todos)
  where
    cons1 ‚à∑ Int ‚Üí [Todo] ‚Üí [(String,Todo)]
    cons1 0 _ = []
    cons1 max trees = [(todoName todo, todo) | todo ‚Üê trees] ‚ß∫ cons1 (max-1) (children trees)
    children ‚à∑ [Todo] ‚Üí [Todo]
    children trees = concatMap subForest trees

stitchTodos ‚à∑ [TodoItem] ‚Üí [Todo]
stitchTodos items = 
  let m = consTodoMap t
      t = mkTodo items
  in  normalizeList m t

allTags ‚à∑ [Todo] ‚Üí [String]
allTags todos = nub $ sort $ concatMap getTags todos
  where
    getTags (Node item children) = itemTags item ‚ß∫ concatMap getTags children

allStatuses ‚à∑ [Todo] ‚Üí [String]
allStatuses todos = nub $ sort $ concatMap getStatus todos
  where
    getStatus (Node item children) = itemStatus item: concatMap getStatus children

grepBy ‚à∑ (TodoItem ‚Üí ùîπ) ‚Üí [Todo] ‚Üí [Todo]
grepBy cond todos = concatMap grep todos
  where
    grep ‚à∑ Todo ‚Üí [Todo]
    grep n@(Node _ children) = test n ‚ß∫ concatMap grep children

    test ‚à∑ Todo ‚Üí [Todo]
    test n@(Node item _)
      | cond item = [n]
      | otherwise = []

grepByTag ‚à∑ String ‚Üí [Todo] ‚Üí [Todo]
grepByTag tag todos = grepBy (\item ‚Üí tag ‚àà itemTags item) todos

grepByStatus ‚à∑ String ‚Üí [Todo] ‚Üí [Todo]
grepByStatus st todos = grepBy (\item ‚Üí st == itemStatus item) todos

tagTodo ‚à∑ String ‚Üí [Todo] ‚Üí Todo
tagTodo tag todos = Node item $ grepByTag tag todos
  where
    item = Item {
      itemLevel = 0,
      itemName = tag,
      itemTags = ["TAG"],
      depends = [],
      itemStatus = ":",
      itemDescr = "",
      startDate = Nothing,
      endDate = Nothing,
      deadline = Nothing,
      fileName = "(no file)",
      lineNr = 0 }

groupByTag' ‚à∑ [Todo] ‚Üí [Todo]
groupByTag' todos = 
  map (\t ‚Üí tagTodo t todos) (allTags todos) ‚ß∫ todos

statusTodo ‚à∑ String ‚Üí [Todo] ‚Üí Todo
statusTodo st todos = Node item $ grepByStatus st todos
  where
    item = Item {
      itemLevel = 0,
      itemName = st,
      itemTags = ["STATUS"],
      depends = [],
      itemStatus = ":",
      itemDescr = "",
      startDate = Nothing,
      endDate = Nothing,
      deadline = Nothing,
      fileName = "(no file)",
      lineNr = 0 }

groupByStatus' ‚à∑ [Todo] ‚Üí [Todo]
groupByStatus' todos =
  map (\s ‚Üí statusTodo s todos) (allStatuses todos) ‚ß∫ todos

dirname ‚à∑ FilePath ‚Üí FilePath
dirname path =
  case dropFileName path of
    [] ‚Üí []
    dir ‚Üí takeFileName (init dir)

fileTodo ‚à∑ FilePath ‚Üí TodoItem
fileTodo path = Item {
  itemLevel = 0,
  itemName = takeFileName path,
  itemTags = [dirname path],
  depends = [],
  itemStatus = ":",
  itemDescr = path,
  startDate = Nothing,
  endDate = Nothing,
  deadline = Nothing,
  fileName = path,
  lineNr = 0 }

todosGroup ‚à∑ FilePath ‚Üí [TodoItem] -> [TodoItem]
todosGroup path items =
  if null items
    then []
    else fileTodo path: map (~+ 1) items

changeTopStatus ‚à∑ Maybe String ‚Üí [Todo] ‚Üí [Todo]
changeTopStatus Nothing   todos = todos
changeTopStatus (Just st) todos = map setStatus todos
  where
    setStatus (Node item children) = Node (item {itemStatus = st}) children

-- | Load list of TODO trees from files
loadTodo ‚à∑ Config
         ‚Üí DateTime      -- ^ Current date/time
         ‚Üí [FilePath]    -- ^ List of files
         ‚Üí IO [Todo]
loadTodo conf date paths = do
    let grp = if groupByFile conf
                then todosGroup
                else const id
    tss ‚Üê forM paths $ \path ‚Üí grp path `fmap` loadFile conf date path
    let todos = stitchTodos (concat tss)
        byTag = if groupByTag conf
                  then groupByTag' todos
                  else todos
        byStatus = if groupByStatus conf
                     then groupByStatus' byTag
                     else byTag
    return $ changeTopStatus (topStatus conf) byStatus


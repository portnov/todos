{-# LANGUAGE UnicodeSyntax, PatternGuards #-}
-- | Read TODOs from files and construct corresponding ADTs.
module TodoLoader
  (loadTodo)
  where

import Prelude hiding (putStrLn,readFile,getContents,print)
import IO
import Control.Monad (forM)
import qualified Data.Map as M
import Text.ParserCombinators.Parsec
import Data.Maybe
import Data.Tree

import Unicode
import Types
import TodoParser

todoName ‚à∑ Todo ‚Üí String
todoName todo = itemName ‚ãÑ rootLabel todo

getDepends ‚à∑ TodoMap ‚Üí TodoItem ‚Üí [Todo]
getDepends m item = catMaybes [M.lookup name m | name ‚Üê depends item] 

normalizeItem ‚à∑ TodoMap ‚Üí TodoItem ‚Üí Todo
normalizeItem m item = Node item (map (normalize m) ‚ãÑ getDepends m item)

normalize ‚à∑ TodoMap ‚Üí Todo ‚Üí Todo 
normalize m todo = Node item' ((map (normalize m) subTodos) ‚ß∫ (map (normalize m) deps))
  where
    item ‚à∑ TodoItem
    item = rootLabel todo

    item' ‚à∑ TodoItem
    item' = item {depends=[]}

    subTodos ‚à∑ [Todo]
    subTodos = subForest todo

    deps ‚à∑ [Todo]
    deps = getDepends m item

normalizeList ‚à∑ TodoMap ‚Üí [Todo] ‚Üí [Todo]
normalizeList m todos = map (normalize m) todos

readFile' ‚à∑ FilePath ‚Üí IO String
readFile' "-"  = getContents
readFile' file = readFile file

loadFile ‚à∑ Config
         ‚Üí DateTime
         ‚Üí FilePath
         ‚Üí IO [TodoItem]
loadFile conf year path =
  case prefix conf of
    Nothing ‚Üí do
        text ‚Üê readFile' path
        return $ parsePlain conf year path text
    Just p  ‚Üí do
        text ‚Üê readFile' path
        return $ parseAlternate conf 2 p year path text

(~-) ‚à∑  TodoItem ‚Üí ‚Ñ§ ‚Üí TodoItem
i@(Item {itemLevel=n}) ~- k = i {itemLevel=n-k}

iszero ‚à∑  TodoItem ‚Üí ùîπ
iszero item = (itemLevel item)==0

group' ‚à∑  [TodoItem] ‚Üí [[TodoItem]]
group' [] = []
group' (x:xs) = let (one,other) = break iszero xs
                in (x:one):group' other

mkTodo ‚à∑ [TodoItem] ‚Üí [Todo]
mkTodo = (map mkTodo') ‚àò group'

mkTodo' ‚à∑ [TodoItem] ‚Üí Todo
mkTodo' (x:xs) = Node x other
    where other = mkTodo ‚ãÑ map (~-lvl) xs
          lvl = itemLevel (head xs)
          
consTodoMap ‚à∑ [Todo] ‚Üí TodoMap
consTodoMap todos = M.fromList (cons1 100 todos)
  where
    cons1 ‚à∑ Int ‚Üí [Todo] ‚Üí [(String,Todo)]
    cons1 0 _ = []
    cons1 max trees = [(todoName todo, todo) | todo ‚Üê trees] ‚ß∫ cons1 (max-1) (children trees)
    children ‚à∑ [Todo] ‚Üí [Todo]
    children trees = concatMap subForest trees

stitchTodos ‚à∑ [TodoItem] ‚Üí [Todo]
stitchTodos items = 
  let m = consTodoMap t
      t = mkTodo items
  in  normalizeList m t

-- | Load list of TODO trees from files
loadTodo ‚à∑ Config
         ‚Üí DateTime      -- ^ Current date/time
         ‚Üí [FilePath]    -- ^ List of files
         ‚Üí IO [Todo]
loadTodo conf date paths = do
    tss ‚Üê forM paths (loadFile conf date)
    return $ stitchTodos (concat tss)

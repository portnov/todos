{-# LANGUAGE UnicodeSyntax, DeriveDataTypeable, TypeSynonymInstances, FlexibleInstances, NoMonomorphismRestriction #-}

module Types where

import Prelude hiding (putStr)
import System.IO.UTF8

import System.Console.ANSI

import Control.Monad.Reader
import Data.Function 
import Data.Generics hiding (GT)
import Data.Tree
import Data.List
import qualified Data.Map as M
import Text.ParserCombinators.Parsec

import Unicode

data TodoItem = Item {
    itemLevel ‚à∑ ‚Ñ§,
    itemName ‚à∑ String,
    itemTags ‚à∑ [String],
    depends ‚à∑ [String],
    itemStatus ‚à∑ String,
    itemDescr ‚à∑ String,
    fileName ‚à∑ FilePath,
    lineNr ‚à∑ Line}
    deriving (Eq,Data,Typeable)

type Todo = Tree TodoItem

type TodoMap = M.Map String Todo

data Limit = Unlimited
           | Limit ‚Ñ§
  deriving (Eq,Show)

instance Ord Limit where
    compare Unlimited Unlimited = EQ
    compare Unlimited _ = GT
    compare _ Unlimited = LT
    compare (Limit x) (Limit y) = compare x y

data CmdLineFlag = QF {queryFlag ‚à∑ QueryFlag}
                 | MF {modeFlag ‚à∑ ModeFlag}
                 | OF {outFlag ‚à∑ OutFlag}
                 | LF {limFlag ‚à∑ LimitFlag}
                 | HelpF
    deriving (Eq,Show)

data QueryFlag = Tag String
               | Name {unName ‚à∑ String}
               | Status String
               | AndCons
               | OrCons
               | NotCons
               | NoFilter
     deriving (Eq,Ord,Show)        

data LimitFlag = Prune {unPrune ‚à∑ ‚Ñ§}
               | Start {unMin ‚à∑ ‚Ñ§}
    deriving (Eq,Show)

data ModeFlag = Execute {unExecute ‚à∑ String}
              | Prefix {unPrefix ‚à∑ String}
              | Describe {unDescribe ‚à∑ String}
    deriving (Eq,Ord,Show)

data OutFlag = OnlyFirst 
             | Colors
    deriving (Eq,Ord,Show)

data OutConfig = OutConfig {
  outOnlyFirst ‚à∑ Bool,
  outColors ‚à∑ Bool }

type ConfigIO = ReaderT OutConfig IO ()

newtype IOList = IOL [ConfigIO]

noIO = IOL []

class IOAdd a where
  (<++>) ‚à∑ IOList ‚Üí a ‚Üí IOList

instance IOAdd (IO ()) where
  (IOL lst) <++> io = IOL (lst ++ [lift io])

instance IOAdd ConfigIO where
  (IOL lst) <++> cio = IOL (lst ++ [cio])

instance IOAdd String where
  iol <++> s = iol <++> (putStr s)

runIOL ‚à∑ OutConfig ‚Üí IOList ‚Üí IO ()
runIOL conf (IOL lst) = runReaderT (sequence_ lst) conf

concatIOL ‚à∑  [IOList] ‚Üí IOList
concatIOL iols = IOL $ concat [lst | IOL lst ‚Üê iols]

intercalateIOL ‚à∑ IO () ‚Üí [IOList] ‚Üí IOList
intercalateIOL s = concatIOL ‚àò intersperse (IOL [lift s])

intersperseIOL ‚à∑  IO () ‚Üí IOList ‚Üí IOList
intersperseIOL a (IOL lst) = IOL $ intersperse (lift a) lst

class ShowIO s where
  showIOL ‚à∑ s ‚Üí IOList

instance ShowIO String where
  showIOL s = IOL [lift $ putStr s]

instance ShowIO (IO ()) where
  showIOL i = IOL [lift i]

instance ShowIO ConfigIO where
  showIOL i = IOL [i]
  
showIO ‚à∑ (ShowIO a) ‚áí OutConfig ‚Üí a ‚Üí IO ()
showIO conf = (runIOL conf) ‚àò showIOL

instance (Ord a) ‚áí Ord (Tree a) where
  compare = compare `on` rootLabel

-- TODO: - rename Options ‚Üí QueryOptions or similar
data Options = O [QueryFlag] [ModeFlag] [OutFlag] [LimitFlag]
             | Help

data Query = Query {
               pruneL ‚à∑ Limit,
               minL   ‚à∑ Limit,
               query  ‚à∑ Composed,
               showOnlyFirst ‚à∑ ùîπ,
               commandToRun ‚à∑ Maybe String,
               prefix ‚à∑ Maybe String,
               descrFormat ‚à∑ String}
    deriving (Eq,Show)

data Composed = Pred QueryFlag
              | And Composed Composed
              | Or Composed Composed
              | Not Composed
              | Empty
              | HelpC
    deriving (Eq,Show)

instance Show TodoItem where
    show item = s ‚ß∫ " " ‚ß∫ tags ‚ß∫ name ‚ß∫ (if null descr then "" else "    "‚ß∫descr)
      where
        n = itemLevel item
        name = itemName item
        ts = itemTags item
        s = itemStatus item
        descr = itemDescr item
        tags = if null ts
                 then ""
                 else "[" ‚ß∫ (unwords ts) ‚ß∫ "] "

setBold = lift $ setSGR [SetConsoleIntensity BoldIntensity]
setColor clr = lift $ setSGR [SetColor Foreground Dull clr]
reset = lift $ setSGR []

bold ‚à∑ String ‚Üí ConfigIO
bold s = do
  col ‚Üê asks outColors 
  when col setBold
  lift $ putStr s
  when col reset

lookupC k [] = Nothing
lookupC k ((lst,c):other) | k `elem` lst = Just c
                          | otherwise    = lookupC k other

statusColors = 
  [(["FIXED", "DONE"], Green),
   (["INVALID"],       Magenta),
   (["*"],             Red),
   (["?"],             Blue)]

colorStatus ‚à∑ String ‚Üí ConfigIO
colorStatus st =
  case lookupC st statusColors of
    Nothing ‚Üí lift $ putStr st
    Just clr ‚Üí do
      col ‚Üê asks outColors 
      when col $ setColor clr
      lift $ putStr st
      when col reset

instance ShowIO TodoItem where
    showIOL item = noIO <++> (colorStatus s) <++> " " <++> tags <++> bold name <++> (if null descr then "" else "    "‚ß∫descr)
      where
        n = itemLevel item
        name = itemName item
        ts = itemTags item
        s = itemStatus item
        descr = itemDescr item
        tags = if null ts
                 then ""
                 else "[" ‚ß∫ (unwords ts) ‚ß∫ "] "

instance Ord TodoItem where
  compare item1 item2 = 
      let c1 = (compare `on` itemLevel) item1 item2
          c2 = (compare `on` itemStatus) item1 item2
          c3 = (compare `on` itemName) item1 item2
      in  if c1 == EQ
            then if c2 == EQ 
                   then c3
                   else c2
            else c1


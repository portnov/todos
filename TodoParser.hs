{-# LANGUAGE UnicodeSyntax, NoMonomorphismRestriction, TypeSynonymInstances, DeriveDataTypeable #-}
module TodoParser
--     (TodoItem (..),
--      Todo, TodoMap, flattern,
--      consTodoMap,
--      loadTodo, showTodo
--     )
    where

import Prelude hiding (putStrLn,readFile,getContents)
import System.IO.UTF8
import Control.Monad
import Data.List
import Text.ParserCombinators.Parsec
import qualified Data.Map as M
import Data.Tree
import Data.Maybe
import Data.Char
import Data.Function
import Data.Generics

import Unicode
import Types

showT ::  (Show t, Ord t) => Int -> Tree t -> [String]
showT n (Node item todos) = ((replicate n ' ') ‚ß∫ (show item)):(concatMap (showT (n+2)) $ sort todos)

showTodo ::  (Show t, Ord t) => Bool -> Tree t -> String
showTodo False = unlines ‚àò showT 0
showTodo True  = head    ‚àò showT 0

strip = reverse . p . reverse .p
  where
    p = dropWhile isSpace

todoName ‚à∑ Todo ‚Üí String
todoName todo = itemName ‚ãÑ rootLabel todo


getDepends ‚à∑ TodoMap ‚Üí TodoItem ‚Üí [Todo]
getDepends m item = catMaybes [M.lookup name m | name ‚Üê depends item] 

normalizeItem ‚à∑ TodoMap ‚Üí TodoItem ‚Üí Todo
normalizeItem m item = Node item (map (normalize m) ‚ãÑ getDepends m item)

normalize ‚à∑ TodoMap ‚Üí Todo ‚Üí Todo 
normalize m todo = Node item' ((map (normalize m) subTodos) ‚ß∫ (map (normalize m) deps))
  where
    item ‚à∑ TodoItem
    item = rootLabel todo

    item' ‚à∑ TodoItem
    item' = item {depends=[]}

    subTodos ‚à∑ [Todo]
    subTodos = subForest todo

    deps ‚à∑ [Todo]
    deps = getDepends m item

normalizeList ‚à∑ TodoMap ‚Üí [Todo] ‚Üí [Todo]
normalizeList m todos = map (normalize m) todos

pSpace ‚à∑ Parser Char
pSpace = oneOf " \t"

pSpace' ‚à∑ Parser String
pSpace' = do
    pSpace
    return " "

pDeps ‚à∑ Parser [String]
pDeps = do
    string "("
    ws ‚Üê (many1 ‚ãÑ noneOf ",)\n") `sepBy` (char ',')
    string ")"
    return $ map strip ws

pTags ‚à∑ Parser [String]
pTags = do
    ts ‚Üê between (char '[') (char ']') $ word `sepBy1` pSpace
    many pSpace
    return ts
  where
    word = many1 (noneOf " \t\n]")

pItem ‚à∑ Parser TodoItem
pItem = do
    pos ‚Üê getPosition
    s ‚Üê many pSpace
    stat ‚Üê pWord
    tags ‚Üê (try pTags <|> return [])
    namew ‚Üê many1 pWord
    many pSpace
    deps ‚Üê (try pDeps <|> return [])
    many pSpace
    descr ‚Üê many (noneOf "\n")
    many pSpace
    many ‚ãÑ char '\n'
    return ‚ãÑ Item (fromIntegral $ length s) (unwords namew) tags deps stat descr (sourceName pos) (sourceLine pos)

pWord ‚à∑ Parser String
pWord = do
    w ‚Üê many1 (noneOf " \t\n")
    (try pSpace') <|> (return w)
    return w

pItems ‚à∑  GenParser Char () [TodoItem]
pItems = do
  its ‚Üê many (try pItem)
  eof
  return its

readFile' ‚à∑ FilePath ‚Üí IO String
readFile' "-" = getContents
readFile' file = readFile file

loadFile ‚à∑  FilePath ‚Üí IO [TodoItem]
loadFile path = do
    text ‚Üê readFile' path
    case parse pItems path text of
        Right items ‚Üí return items
        Left e ‚Üí error ‚ãÑ show e

(~-) ‚à∑  TodoItem ‚Üí ‚Ñ§ ‚Üí TodoItem
i@(Item {itemLevel=n}) ~- k = i {itemLevel=n-k}

iszero ‚à∑  TodoItem ‚Üí ùîπ
iszero item = (itemLevel item)==0

group' ‚à∑  [TodoItem] ‚Üí [[TodoItem]]
group' [] = []
group' (x:xs) = let (one,other) = break iszero xs
                in (x:one):group' other

mkTodo ‚à∑ [TodoItem] ‚Üí [Todo]
mkTodo = (map mkTodo') ‚àò group'

mkTodo' ‚à∑ [TodoItem] ‚Üí Todo
mkTodo' (x:xs) = Node x other
    where other = mkTodo ‚ãÑ map (~-lvl) xs
          lvl = itemLevel (head xs)
          
flattern ‚à∑ [Todo] ‚Üí [Todo]
flattern = concatMap flat
    where
        flat ‚à∑ Todo ‚Üí [Todo]
        flat (Node item trees) = (Node item []):(concatMap flat trees)
        
consTodoMap ‚à∑ [Todo] ‚Üí TodoMap
consTodoMap todos = M.fromList (cons1 100 todos)
  where
    cons1 ‚à∑ Int ‚Üí [Todo] ‚Üí [(String,Todo)]
    cons1 0 _ = []
    cons1 max trees = [(todoName todo, todo) | todo ‚Üê trees] ‚ß∫ cons1 (max-1) (children trees)
    children ‚à∑ [Todo] ‚Üí [Todo]
    children trees = concatMap subForest trees

stitchTodos ‚à∑ [TodoItem] ‚Üí [Todo]
stitchTodos items = 
  let m = consTodoMap t
      t = mkTodo items
  in  normalizeList m t

loadTodo ‚à∑  [FilePath] ‚Üí IO [Todo]
loadTodo paths = do
    tss ‚Üê forM paths loadFile
    return $ stitchTodos (concat tss)
